const App = {
      data() {
        return {
          targetCount: 0,
          currentCount: 0,
          objectType: '',
          feedback: '',
          message: '',
          showNextButton: false,
          emojis: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº'],
          objectTypes: ['—Å–æ–±–∞—á–∫', '–∫–æ—à–µ—á–∫', '–º—ã—à–∫', '—Ö–æ–º—è—á–∫', '–∑–∞–π—á–∏–∫–∞', '–ª–∏—Å–∏—á–∫', '–º–µ–¥–≤–µ–∂–æ–Ω–∫', '–ø–∞–Ω–¥—É'],
          usedIndices: []
        }
      },
      computed: {
        displayedObjects() {
          // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 6 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö (1 —Ü–µ–ª–µ–≤–æ–µ + 5 –¥—Ä—É–≥–∏—Ö)
          const objects = [];
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
          const targetIndex = this.objectTypes.indexOf(this.objectType);
          for (let i = 0; i < this.targetCount; i++) {
            objects.push({
              emoji: this.emojis[targetIndex],
              type: this.objectType
            });
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
          const otherIndices = [...Array(this.emojis.length).keys()]
            .filter(i => i !== targetIndex && !this.usedIndices.includes(i));
          
          // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã
          const shuffled = [...otherIndices].sort(() => 0.5 - Math.random());
          
          // –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (6 - targetCount)
          const needed = 6 - this.targetCount;
          for (let i = 0; i < needed && i < shuffled.length; i++) {
            const idx = shuffled[i];
            objects.push({
              emoji: this.emojis[idx],
              type: this.objectTypes[idx]
            });
          }
          
          // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
          return objects.sort(() => 0.5 - Math.random());
        },
        getCorrectWordForm() {
          if (this.targetCount === 1) return this.objectType;
          if (this.targetCount >= 2 && this.targetCount <= 4) return this.objectType.slice(0, -1) + '–∫–∏';
          return this.objectType.slice(0, -1) + '–æ–∫';
        }
      },
      created() {
        this.generateTask();
      },
      methods: {
        generateTask() {
          // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å
          let availableIndices = [...Array(this.objectTypes.length).keys()]
            .filter(i => !this.usedIndices.includes(i));
          
          if (availableIndices.length === 0) {
            // –ï—Å–ª–∏ –≤—Å–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            this.usedIndices = [];
            availableIndices = [...Array(this.objectTypes.length).keys()];
          }
          
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
          const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
          this.usedIndices.push(randomIndex);
          
          this.objectType = this.objectTypes[randomIndex];
          this.targetCount = Math.floor(Math.random() * 5) + 1; // –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 3
          this.currentCount = 0;
          this.feedback = '';
          this.message = '';
          this.showNextButton = false;
        },
        checkAnswer(type) {
          if (this.showNextButton) return;
          
          if (type === this.objectType) {
            this.currentCount++;
            
            if (this.currentCount === this.targetCount) {
              this.feedback = 'correct';
              this.message = '–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
              this.showNextButton = true;
            } else if (this.currentCount < this.targetCount) {
              this.message = `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å ${this.targetCount - this.currentCount}`;
            }
          } else {
            this.feedback = 'incorrect';
            this.message = '–û–π, —ç—Ç–æ –Ω–µ —Ç–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ';
          }
        },
        nextTask() {
          this.generateTask();
        }
      }
    }
const app = Vue.createApp(App);
app.mount('#app')

